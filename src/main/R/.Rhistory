#
varHealthy <- 0.36
varMS <- 0.36
N <- ((2*1.96)/(clinicalBenefit-clinicalHarm))^2 * (varHealthy + varMS)
N
clinicalHarm <- -0.069
clinicalBenefit <- 0.069
#
# Variability of percent change in brain volume
# in healthy controls
#
varHealthy <- 0.36
varMS <- 0.2
#
# Sample size calculation
#
#
N <- ((2*1.96)/(clinicalBenefit-clinicalHarm))^2 * (varHealthy + varMS)
N
varHealthy <- 0.2
varMS <- 0.2
#
# Sample size calculation
#
#
N <- ((2*1.96)/(clinicalBenefit-clinicalHarm))^2 * (varHealthy + varMS)
N
#
clinicalHarm <- -0.1
clinicalBenefit <- 0.1
#
# Variability of percent change in brain volume
# in healthy controls
#
varHealthy <- 0.2
varMS <- 0.2
#
# Sample size calculation
#
#
N <- ((2*1.96)/(clinicalBenefit-clinicalHarm))^2 * (varHealthy + varMS)
N
0.1/0.23
0.23*.3
X = as.matrix(c(1,0,0,1),nrow=2)
X
X = as.matrix(c(1,0,0,1),nrows=2)
X
X = as.matrix(c(1,0,0,1),nrow=2,byrow=FALSE)
X
X = as.matrix(c(1,0,0,1),ncol=2,byrow=FALSE)
X
X = as.matrix(c(1,0,0,1),ncol=2,ncol=2,byrow=FALSE)
X
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol=3, byrow=TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
X = matrix(c(1,0,0,1),ncol=2,ncol=2,byrow=FALSE)
X = matrix(c(1,0,0,1), ncol=2,nrow=2,byrow=FALSE)
X
C = matrix(c(1,-1))
C
C = matrix(c(1,-1),nrow=1)
C
B = matrix(c(1,0),nrow=2)
B
thetaObs = C%*%B
thetaObs
sigmaSq = matrix(c(2))
sigmaSq
N = 1:1000
N = 10
Xfull = X%x%diag(N)
Xpx = t(Xfull)%*%Xfull*sigmaSqInv
sigmaSqInv = 1/sigmaSq
Xpx = t(Xfull)%*%Xfull*sigmaSqInv
Xfull
Xfull
Xfull = diag(N)%x%X
Xfull
X
rep(N,1)
Xfull = X%x%matrix(rep(1,N))
Xfull
Xpx = t(Xfull)%*%Xfull*sigmaSqInv
Xpx = t(Xfull)%*%Xfull%*%sigmaSqInv
sigmaSqInv = solve(sigmaSq)
Xfull = X%x%matrix(rep(1,N))
Xpx = t(Xfull)%*%Xfull%*%sigmaSqInv
t(Xfull)
t(Xfull)%*%Xfull
sigmaSqInv = solve(sigmaSq)
sigmaSqInv
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
sigmaSqInv = 0.5
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
sigInvFull
Xpx = t(Xfull)%*%sigmaSqInv%*%Xfull
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
thetaDiff = C%*%B-thetaNull
thetaNull = matrix(c(0),nrow=1)
thetaDiff = C%*%B-thetaNull
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
F
N = 1:1000
Y = lapply(N,calcWald)
calcWald <- function(N) {
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
}
N = 1:10
Y = lapply(N,calcWald)
Y
calcWald <- function(N) {
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
return(F)
}
N = 1:10
Y = lapply(N,calcWald)
Y
unlist(Y)
N = 1:10
Y = lapply(N,calcWald)
plot(N,unlist(Y))
N = 1:1000
Y = lapply(N,calcWald)
plot(N,unlist(Y))
N = 1:200
Y = lapply(N,calcWald)
plot(N,unlist(Y))
Xfull
N = 2
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
F
N = 20
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
return(F)
F
sigInvFull
Xfull
Xpx
calcWald <- function(N) {
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%solve(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
return(F)
}
N = 1:200
Y = lapply(N,calcWald)
plot(N,unlist(Y))
N = 2:400
Y = lapply(N,calcWald)
plot(N,unlist(Y))
lines(N,N)
X = diag(3)
X
calcWald <- function(N) {
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%solve(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
return(F)
}
N = 2:400
Y = lapply(N,calcWald)
plot(N,unlist(Y))
lines(N,N)
C = matrix(c(1,-1,0,0,1,0,-1,0,1,0,0,-1),nrow=3)
C
C = matrix(c(1,-1,0,0,1,0,-1,0,1,0,0,-1),nrow=3,byrow=FALSE)
C
C = matrix(c(1,-1,0,0,1,0,-1,0,1,0,0,-1),nrow=3,byrow=TRUE)
C
B = matrix(c(1,0,0,0),nrow=2)
B
thetaObs = C%*%B
thetaObs
B = matrix(c(1,0,0,0),nrow=4)
B
thetaObs = C%*%B
thetaObs
thetaNull = matrix(c(0),nrow=1)
thetaNull
thetaNull = matrix(c(0,0,0),nrow=3)
thetaNull
thetaDiff = C%*%B-thetaNull
sigmaSq = matrix(c(2))
sigmaSqInv = 0.5
N = 2:400
Y = lapply(N,calcWald)
N=4
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%solve(C%*%solve(Xpx)%*%t(C))%*%thetaDiff
Xpx
Xfull
X = diag(4)
X
C = matrix(c(1,-1,0,0,1,0,-1,0,1,0,0,-1),nrow=3,byrow=TRUE)
C
B = matrix(c(1,0,0,0),nrow=4)
B
thetaObs = C%*%B
thetaObs
thetaNull = matrix(c(0,0,0),nrow=3)
thetaNull
thetaDiff = C%*%B-thetaNull
sigmaSq = matrix(c(2))
sigmaSqInv = 0.5
N = 2:400
Y = lapply(N,calcWald)
plot(N,unlist(Y))
lines(N,N)
N = 2:400
Y = lapply(N,calcWald)
rho = ((1+Y)^2 + (1+2*Y)(N-r-2)) / (N-r-4)
Fobs = unlist(Y)
rho = ((1+Fobs)^2 + (1+2*Fobs)(N-r-2)) / (N-r-4)
rho = ((1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (N-r-4)
r = 4
rho = ((1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (N-r-4)
plot(N,rho)
N = 10:400
Y = lapply(N,calcWald)
Fobs = unlist(Y)
rho = ((1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (N-r-4)
plot(N,rho)
calcWald <- function(N) {
Xfull = X%x%matrix(rep(1,N))
sigInvFull = sigmaSqInv*diag(nrow(Xfull))
Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%solve(C%*%solve(Xpx)%*%t(C))%*%thetaDiff*(1/nrow(C))
return(F)
}
X = diag(4)
X
C = matrix(c(1,-1,0,0,1,0,-1,0,1,0,0,-1),nrow=3,byrow=TRUE)
C
B = matrix(c(1,0,0,0),nrow=4)
B
thetaObs = C%*%B
thetaObs
thetaNull = matrix(c(0,0,0),nrow=3)
thetaNull
thetaDiff = C%*%B-thetaNull
sigmaSq = matrix(c(2))
sigmaSqInv = 0.5
N = 2:400
Y = lapply(N,calcWald)
plot(N,unlist(Y))
lines(N,N)
rho = (a*(1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (a*(N-r-4))
rho = (nrow(C)*(1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (nrow(C)*(N-r-4))
a = nrow(C)
r = 4
a = nrow(C)
N = 10:400
Y = lapply(N,calcWald)
Fobs = unlist(Y)
rho = (a*(1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (a*(N-r-4))
plot(N,rho)
nu_p = 4 + (2*(1+2*Fobs)+a*(1+Fobs)^2)/(rho*a-1-2*Fobs)
plot(N,nu_p)
lines(N,N,col="green")
nu_p
plot(N,nu_p,"l")
lines(N,N,col="green")
N - nu_p
plot(N,rho)
plot(N, Fobs)
X = matrix(c(1,0,0,1),nrow=2)
X
X %x% diag(10)
diag(10)%x%X
ones = matrix(rep(10,1), nrow=10)
ones
diag(10)%x%X
X %x% ones
ones
ones = matrix(rep(1,10), nrow=10)
X %x% ones
sigma = matrix(c(2,0.2,0.2, 2), nrow=2)
sigma
sigma%x%diag(3)
diag(3) %x% sigma
ones %x% X
X = matrix(c(1,1,0,2,1,0,3,1,0,1,0,1,2,0,1,3,0,1),nrow=6)
X
X = matrix(c(1,1,0,2,1,0,3,1,0,1,0,1,2,0,1,3,0,1),nrow=6,byrow=TRUE)
X
ones %x% X
X %x% ones
diag(2) %x% diag(2)
matrix(c(1,0),nrow=1)
diag(3) %x% matrix(c(1,0),nrow=1)
diag(3) %x% matrix(c(0,1),nrow=1)
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
0
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94+12.84+29.36
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94+12.84+29.36
+13.47+40.69
13.47+40.69+5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94+12.84+29.36
x = 1:10
y1 = x
y2 = x^2
y3 = -x
plot(x,y,"l",xlim=c(-10,10),ylim=c(-10,10))
plot(x,y1,"l",xlim=c(-10,10),ylim=c(-10,10))
lines(x,y2)
lines(x,y2,pch=c(21,22,23))
x = 1:10
y1 = x
y2 = x^2
y3 = -x
plot(x,y1,"l",xlim=c(-10,10),ylim=c(-10,10), pch=21)
lines(x,y2,pch=22)
lines(x,y3,pch=23)
legend( -3.05, -0.55, c( expression( N[m1] ), expression( N[m2] ), expression( N[m9]) ),
cex = 1.1, pch = c( 21, 22, 23 ), lty = c( 1, 6, 3 ), bty = "n",
horiz = TRUE, text.width = 1.5 )
x = 1:10
y1 = x
y2 = x^2
y3 = -x
plot(x,y1,"l",xlim=c(-10,10),ylim=c(-10,10), pch=21)
lines(x,y2,pch=22)
lines(x,y3,pch=23)
legend( -3.05, -0.55, c( expression( $N[m1]$ ), expression( N[m2] ), expression( N[m9]) ),
cex = 1.1, pch = c( 21, 22, 23 ), lty = c( 1, 6, 3 ), bty = "n",
horiz = TRUE, text.width = 1.5 )
X = matrix(c(1,0,0,1), nrow=2)
X
rows(X)
nrows(X)
nrow(X)
library(MASS)
generateMVNSample <- function(X, Beta, Sigma_e, outWide, outLong) {
N = nrow(X)
outWide = mvrnorm(n=N, mu=rep(0, N), Sigma = Sigma_e)
}
X = matrix(rep(1,10)) %x% diag(2)
X
X =  diag(2) %x% matrix(rep(1,10))
X
matrix(rep(1,3))
t(matrix(rep(1,3))
)
matrix(rep(1,3))*t(matrix(rep(1,3)))
matrix(rep(1,3))%*%t(matrix(rep(1,3)))
rho = 0.2
sigSq = 2
Sigma_e = sigSq*(matrix(rep(1,3))%*%t(matrix(rep(1,3)))*rho+diag(3)*(1-rho))
Sigma_e
Beta = matrix(c(1,1,1,0,0,0),nrows=2)
Beta = matrix(c(1,1,1,0,0,0),nrow=2)
Beta
Beta = matrix(c(1,1,1,0,0,0),nrow=2,byrow=TRUE)
Beta
errorSample = mvrnorm(n=N, mu=rep(0, N), Sigma = Sigma_e)
N = nrow(X)
errorSample = mvrnorm(n=N, mu=rep(0, N), Sigma = Sigma_e)
rep(0, N)
X%*%Beta
errorSample = mvrnorm(n=1, X%*%Beta, Sigma = Sigma_e)
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
var(mvrnorm(n=1000, rep(0, 2), Sigma))
mvrnorm(n=1000, rep(0, 2), Sigma)
var(mvrnorm(n=1, rep(0, 2), Sigma))
mvrnorm(n=1, rep(0, 2), Sigma)
rnorm(5)
y = rnorm(100)
hist(y)
library(plyr)
setwd("~/Documents/MyProjects/Git/bitbucket/Paper2_KRPowerFixedUnbalanced/validationExperiment/src/main/R")
library(lme4)
install.packages(lme4)
install.packages("lme4")
diag(3)
setClass (" studyDesign ",
representation ( id = " character ",
description = " character ",
X = " matrix ",
B = " matrix ",
Sigma = " matrix ",
C = " matrix ",
U = " matrix ",
ThetaNull = " matrix "
),
prototype ( id ="generic Two-sample T-test",
description ="A two group study design",
X = diag(2),
B = as.matrix(c(1,0),nrow=2),
Sigma = as.matrix(c(1)),
C = as.matrix(c(1,-1), nrow=1),
U = null,
ThetaNull = as.matrix(c(0)))
)
setClass (" studyDesign ",
representation ( id = " character ",
description = " character ",
X = " matrix ",
B = " matrix ",
Sigma = " matrix ",
C = " matrix ",
U = " matrix ",
ThetaNull = " matrix "
),
prototype ( id ="generic Two-sample T-test",
description ="A two group study design",
X = diag(2),
B = as.matrix(c(1,0),nrow=2),
Sigma = diag(1),
C = as.matrix(c(1,-1), nrow=1),
U = diag(1),
ThetaNull = as.matrix(c(0)))
)
setClass (" studyDesign ",
representation ( id = "character",
description = "character",
X = "matrix",
B = "matrix",
Sigma = "matrix",
C = "matrix",
U = "matrix",
ThetaNull = "matrix"
),
prototype ( id ="generic Two-sample T-test",
description ="A two group study design",
X = diag(2),
B = as.matrix(c(1,0),nrow=2),
Sigma = diag(1),
C = as.matrix(c(1,-1), nrow=1),
U = diag(1),
ThetaNull = as.matrix(c(0)))
)
new("studyDesign")
setClass ("studyDesign",
representation ( id = "character",
description = "character",
X = "matrix",
B = "matrix",
Sigma = "matrix",
C = "matrix",
U = "matrix",
ThetaNull = "matrix"
),
prototype ( id ="generic Two-sample T-test",
description ="A two group study design",
X = diag(2),
B = as.matrix(c(1,0),nrow=2),
Sigma = diag(1),
C = as.matrix(c(1,-1), nrow=1),
U = diag(1),
ThetaNull = as.matrix(c(0)))
)
new("studyDesign")
library(lme4)
library(plyr)
#
# set some relative paths
#
INPUT_DIR = "../../../input/";
OUTPUT_DATA_DIR = "../../../output/datasets/";
MODULES_DIR = "../../modules/R/";
source(paste(MODULES_DIR,"studyDesign.R",sep=""))
paste(MODULES_DIR,"studyDesign.R",sep="")
test = new("studyDesign")
test
test$id
id(test)
test.id
test@id
test@description
method.skeleton
