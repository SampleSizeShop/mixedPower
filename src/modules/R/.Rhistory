Xpx = t(Xfull)%*%sigInvFull%*%Xfull
F = t(thetaDiff)%*%solve(C%*%solve(Xpx)%*%t(C))%*%thetaDiff*(1/nrow(C))
return(F)
}
X = diag(4)
X
C = matrix(c(1,-1,0,0,1,0,-1,0,1,0,0,-1),nrow=3,byrow=TRUE)
C
B = matrix(c(1,0,0,0),nrow=4)
B
thetaObs = C%*%B
thetaObs
thetaNull = matrix(c(0,0,0),nrow=3)
thetaNull
thetaDiff = C%*%B-thetaNull
sigmaSq = matrix(c(2))
sigmaSqInv = 0.5
N = 2:400
Y = lapply(N,calcWald)
plot(N,unlist(Y))
lines(N,N)
rho = (a*(1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (a*(N-r-4))
rho = (nrow(C)*(1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (nrow(C)*(N-r-4))
a = nrow(C)
r = 4
a = nrow(C)
N = 10:400
Y = lapply(N,calcWald)
Fobs = unlist(Y)
rho = (a*(1+Fobs)^2 + (1+2*Fobs)*(N-r-2)) / (a*(N-r-4))
plot(N,rho)
nu_p = 4 + (2*(1+2*Fobs)+a*(1+Fobs)^2)/(rho*a-1-2*Fobs)
plot(N,nu_p)
lines(N,N,col="green")
nu_p
plot(N,nu_p,"l")
lines(N,N,col="green")
N - nu_p
plot(N,rho)
plot(N, Fobs)
X = matrix(c(1,0,0,1),nrow=2)
X
X %x% diag(10)
diag(10)%x%X
ones = matrix(rep(10,1), nrow=10)
ones
diag(10)%x%X
X %x% ones
ones
ones = matrix(rep(1,10), nrow=10)
X %x% ones
sigma = matrix(c(2,0.2,0.2, 2), nrow=2)
sigma
sigma%x%diag(3)
diag(3) %x% sigma
ones %x% X
X = matrix(c(1,1,0,2,1,0,3,1,0,1,0,1,2,0,1,3,0,1),nrow=6)
X
X = matrix(c(1,1,0,2,1,0,3,1,0,1,0,1,2,0,1,3,0,1),nrow=6,byrow=TRUE)
X
ones %x% X
X %x% ones
diag(2) %x% diag(2)
matrix(c(1,0),nrow=1)
diag(3) %x% matrix(c(1,0),nrow=1)
diag(3) %x% matrix(c(0,1),nrow=1)
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
0
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94+12.84+29.36
5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94+12.84+29.36
+13.47+40.69
13.47+40.69+5+50.7+3.8+5.6+4.28+9.77+17.1-20.83+360.84+24.5+31.27+19.41+41.24+134.61+
17+57.55+20.83+8.63+24.57-25.88+17.76+89.04+9.08+65.10+23.41+16.48+31.57+
24.75+14.02+19.22+17.82+42.37+31.73+35.43+21.59+20.78+31+30+42+2+1397.01+24+
17.74+17.10+160.22+8.38+3.52+27.3+28+28.21+50.70+39+164.83+5.94+12.84+29.36
x = 1:10
y1 = x
y2 = x^2
y3 = -x
plot(x,y,"l",xlim=c(-10,10),ylim=c(-10,10))
plot(x,y1,"l",xlim=c(-10,10),ylim=c(-10,10))
lines(x,y2)
lines(x,y2,pch=c(21,22,23))
x = 1:10
y1 = x
y2 = x^2
y3 = -x
plot(x,y1,"l",xlim=c(-10,10),ylim=c(-10,10), pch=21)
lines(x,y2,pch=22)
lines(x,y3,pch=23)
legend( -3.05, -0.55, c( expression( N[m1] ), expression( N[m2] ), expression( N[m9]) ),
cex = 1.1, pch = c( 21, 22, 23 ), lty = c( 1, 6, 3 ), bty = "n",
horiz = TRUE, text.width = 1.5 )
x = 1:10
y1 = x
y2 = x^2
y3 = -x
plot(x,y1,"l",xlim=c(-10,10),ylim=c(-10,10), pch=21)
lines(x,y2,pch=22)
lines(x,y3,pch=23)
legend( -3.05, -0.55, c( expression( $N[m1]$ ), expression( N[m2] ), expression( N[m9]) ),
cex = 1.1, pch = c( 21, 22, 23 ), lty = c( 1, 6, 3 ), bty = "n",
horiz = TRUE, text.width = 1.5 )
X = matrix(c(1,0,0,1), nrow=2)
X
rows(X)
nrows(X)
nrow(X)
library(MASS)
generateMVNSample <- function(X, Beta, Sigma_e, outWide, outLong) {
N = nrow(X)
outWide = mvrnorm(n=N, mu=rep(0, N), Sigma = Sigma_e)
}
X = matrix(rep(1,10)) %x% diag(2)
X
X =  diag(2) %x% matrix(rep(1,10))
X
matrix(rep(1,3))
t(matrix(rep(1,3))
)
matrix(rep(1,3))*t(matrix(rep(1,3)))
matrix(rep(1,3))%*%t(matrix(rep(1,3)))
rho = 0.2
sigSq = 2
Sigma_e = sigSq*(matrix(rep(1,3))%*%t(matrix(rep(1,3)))*rho+diag(3)*(1-rho))
Sigma_e
Beta = matrix(c(1,1,1,0,0,0),nrows=2)
Beta = matrix(c(1,1,1,0,0,0),nrow=2)
Beta
Beta = matrix(c(1,1,1,0,0,0),nrow=2,byrow=TRUE)
Beta
errorSample = mvrnorm(n=N, mu=rep(0, N), Sigma = Sigma_e)
N = nrow(X)
errorSample = mvrnorm(n=N, mu=rep(0, N), Sigma = Sigma_e)
rep(0, N)
X%*%Beta
errorSample = mvrnorm(n=1, X%*%Beta, Sigma = Sigma_e)
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
var(mvrnorm(n=1000, rep(0, 2), Sigma))
mvrnorm(n=1000, rep(0, 2), Sigma)
var(mvrnorm(n=1, rep(0, 2), Sigma))
mvrnorm(n=1, rep(0, 2), Sigma)
rnorm(5)
y = rnorm(100)
hist(y)
ls("package:knitr")
library(knitr)
library(help=knitr)
?knit
x = diag(4)
print.matrix(x)
print(x)
write.table(x)
write.table(x, row.names=FALSE, col.names=F)
write.table(x, row.names=FALSE, col.names=F, eol=",")
XSas = write.table(X, row.names=FALSE, col.names=F, eol=",\n\r")
X=diag(4)
XSas = write.table(X, row.names=FALSE, col.names=F, eol=",\n\r")
substr(XSas,length(XSas)-3, length(XSas))
length(Xsas)
length(XSas)
XSas.length
XSas
XSas = write.table(X, row.names=FALSE, col.names=F, eol=",\n\r")
XSas
XSas = print.table(X, row.names=FALSE, col.names=F, eol=",\n\r")
XSas
XSas = print.table(X, row.names=FALSE, col.names=FALSE, eol=",\n\r")
XSas = capture.output(write.table(X, row.names=FALSE, col.names=F, eol=",\n\r"))
XSas
substr(XSas,length(XSas)-3, length(XSas))
X = diag(4)
X
X[1,]
knit("../knitr/sasSimulationCodeTemplate.Rmd","../knitr/sasSimulationCode.sas")
library(knitr)
knit("../knitr/sasSimulationCodeTemplate.Rmd","../knitr/sasSimulationCode.sas")
getwd()
setwd("~/Documents/MyProjects/Git/bitbucket/Paper2_KRPowerFixedUnbalanced/validationExperiment/src/modules/R")
knit("../knitr/sasSimulationCodeTemplate.Rmd","../knitr/sasSimulationCode.sas")
getwd()
knit("sasSimulationCodeTemplate.Rmd","sasSimulationCode.sas")
knit("sasSimulationCodeTemplate.Rmd","sasSimulationCode.sas")
"s " + "q"
matrixToIML <- function(name, m) {
str = paste(name,"= {\n")
rowCount = nrow(m)
for(i in 1:rowCount) {
str = paste(str,"\t",m[i,])
if (i < rowCount) {
str = paste(str,",\n")
}
}
str = paste(str,"\n}\n")
}
matrixToIML(diag(3))
matrixToIML("foo",diag(3))
matrixToIML("foo",diag(3))
matrixToIML <- function(name, m) {
str = paste(name,"= {\n")
rowCount = nrow(m)
for(i in 1:rowCount) {
str = paste(str,"\t",m[i,])
if (i < rowCount) {
str = paste(str,",\n")
}
}
str = paste(str,"\n}\n")
return(str)
}
matrixToIML("foo",diag(3))
str = "foo"
str += "bar"
str = paste("foo")
str = paste("bar")
str
str=cat("foo")
str=cat("bar")
str = "foo"
append(str, "bar")
library(plyr)
ldply(diag(x), function(){cat(x)})
ldply(diag(4), function(){cat(x)})
llply(diag(4), function(item){cat(item)})
llply(diag(4), function(item){cat("hi=",item)})
dlply(diag(4), function(item){cat("hi=",item)})
as.list(diag(4))
diag(4)
apply(diag(4),function(x){cat(x)})
apply(diag(4),1,function(x){cat(x)})
apply(diag(4),1,function(x){cat(x,",")})
lapply(diag(4),1,function(x){cat(x,",")})
apply(diag(4),1,function(x,n){cat(n,x,",")})
as.vector(apply(diag(x),1,function(){cat(x)})
)
as.vector(apply(diag(x),1,function(x){cat(x)})
)
as.vector(apply(diag(4),1,function(x){cat(x)}))
matrixToIML <- function(name, m) {
rowCount = nrow(m)
rowstrings = list()
for(i in 1:rowCount) {
rowstrings[[i]] = paste("\t",m[i,],ifelse(i<rowCount,",\n","\n"))
}
return(paste(name, "= {\n",rowstrings,"\n}\n"))
}
matrixToIML(diag(X))
matrixToIML(diag(3))
matrixToIML("X",diag(3))
matrixToIML <- function(name, m) {
rowCount = nrow(m)
rowstrings = list()
for(i in 1:rowCount) {
rowstrings[[i]] = paste("\t",m[i,],ifelse(i<rowCount,",\n","\n"))
}
return(paste(name, "= {\n",rowstrings,"\n}\n"))
}
matrixToIML("X",diag(3))
#
matrixToIML <- function(name, m) {
rowCount = nrow(m)
rowstrings = list()
for(i in 1:rowCount) {
rowstrings[[i]] = paste("\t",m[i,],ifelse(i<rowCount,",\n","\n"))
}
cat(rowstrings)
return(paste(name, "= {\n",rowstrings,"\n}\n"))
}
matrixToIML("X",diag(3))
rowstrings = array()
m=diag(3)
rowCount = nrow(m)
rowstrings = array()
for(i in 1:rowCount) {
rowstrings[i] = paste("\t",m[i,],ifelse(i<rowCount,",\n","\n"))
}
cat(rowstrings)
rowstrings = array()
rowstrings
rowstrings = vector()
for(i in 1:rowCount) {
rowstrings[i] = paste("\t",m[i,],ifelse(i<rowCount,",\n","\n"))
}
rowstrings = vector()
for(i in 1:rowCount) {
rowstrings[i] = paste("\t",m[i,])
}
cat(rowstrings)
rowCount = nrow(m)
rowstrings = vector()
for(i in 1:rowCount) {
rowstrings[[i]] = paste("\t",m[i,])
}
cat(rowstrings)
rowstrings = list()
for(i in 1:rowCount) {
rowstrings[[i]] = paste("\t",m[i,])
}
cat(rowstrings)
paste("\t",m[i,])
i=1
m[i,]
rowstrings = list()
for(i in 1:rowCount) {
rowstrings[[i]] = paste("\t",cat(m[i,]),ifelse(i<rowCount,",\n","\n"))
}
cat(rowstrings)
rowstrings = list()
for(i in 1:rowCount) {
rowstrings[[i]] = paste("\t",cat(m[i,]),ifelse(i<rowCount,",\n","\n"))
}
print(rowstrings)
paste("row[",i,"]=",m[i,])
paste("row[",i,"]=",(m[i,])
)
paste("row[",i,"]=",cat(m[i,]))
paste("row[",i,"]=",paste(m[i,]))
do.call("paste",diag(x))
do.call("paste",diag(3))
apply(diag(3), 1, paste, collapse=" ")
apply(m,1,function(x){paste(x,"test")})
m
apply(m,1,paste)
apply(diag(3), 1, paste, collapse=" ")
apply(diag(3), 1, paste, collapse=" + ")
apply(diag(3), 1, function(x){paste(x)}, collapse=" "
)
apply(diag(3), 1, function(x){paste(x)}, collapse=" ")
apply(diag(3), 1, function(x, collapse){paste(x)}, collapse=" ")
apply(diag(3), 1, function(x, collapse){paste(x, collapse)}, collapse=
" ")
sapply(1:nrow(m),function(i){paste(m[i,], collapse=" ")})
sapply(1:nrow(m),function(i){paste(m[i,], ifelse(i<nrow(m),",",""),collapse=" ")})
sapply(1:nrow(m),function(i){paste(m[i,], collapse=" ", ifelse(i<nrow(m),",","")})
paste(m[i,])
paste(m[i,], collapse=" ")
paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))
paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))
sapply(1:nrow(m),function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}
)
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}),
"\n};\n"
}
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}),
"\n};\n"
)
)
}
matrixToIML(diag(3))
matrixToIML("foo", diag(3))
lapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))})
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
lapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}),
"\n};\n"
)
)
}
matrixToIML("foo", diag(3))
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
unlist(lapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))})),
"\n};\n"
)
)
}
matrixToIML(diag(2))
matrixToIML("f",diag(2))
sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}))
sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))})
(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}))
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}))
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "), ifelse(i<nrow(m),",",""))}), collapse="")
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",\n","\n"))}),collapse=""),
"\n};\n"
)
)
}
matrixToIML(diag(3))
matrixToIML("f",diag(3))
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",\n","\n"))}),collapse=""),
"\n};\n"
)
)
}
f = matrixToIML("X",diag(3))
f
print(x)
print(X)
print(f)
matrixToIML("f",diag(5))
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",\n","\n"))}),collapse="")
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="\n"),
"\n};\n"
)
)
}
matrixToIML("f",diag(5))
matrixToIML <- function(name, m) {
return(
paste(
name, "= {\n",
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="\\n"),
"\\n};\\n"
)
)
}
matrixToIML("f",diag(2))
cat(matrixToIML("f",diag(2)))
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="\n")
paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="")
cat(rowData)
rowData = paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse=""))
rowData = paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="")
cat(rowData)
rowData = paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="\n")
cat(rowData)
rowDataStr = paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="\n")
cat(rowDataStr)
imlStr = paste(name, "= {\n", rowDataStr, "\n};\n")
cat(imlStr)
matrixToIML <- function(name, m) {
rowDataStr = paste(sapply(1:nrow(m),
function(i){paste(paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="\n")
cat(rowDataStr)
imlStr = paste(name, "= {\n", rowDataStr, "\n};\n")
cat(imlStr)
}
matrixToIML("X",diag(3))
matrixToIML <- function(name, m) {
rowDataStr = paste(sapply(1:nrow(m),
function(i){paste("\t", paste(m[i,], collapse=" "),
ifelse(i<nrow(m),",",""))}),collapse="\n")
imlStr = paste(name, "= {\n", rowDataStr, "\n};\n")
return(imlStr)
}
matrixToIML("X",diag(3))
cat(matrixToIML("X",diag(3)))
