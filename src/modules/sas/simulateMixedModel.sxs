/*
* Paper: Kenward and Roger Power
* Author: Sarah Kreidler
* Date: 5/8/2013
*
* simulateMixedModel.sxs
*
* SAS/IML Module to calculate empirical power for the Wald test
* with denominator degrees of freedom as described by Kenward and Roger
* 
*
*/

/*
* genDataFullCovarianceNoMissing
*
* Generate data sets with the specified covariance matrix.
* Assumes no missing data, although fixed patterns of imbalance
* may be specified in the covariance matrix
*
* Arguments:
*  replicates - the number of replicates to produce for simulation
*  blockSize - number of replicates to include in each data set written to disk
*  X - the design matrix for fixed effects
*  Beta - matrix containing choices for regression coefficients for fixed effects
*  SigmaS - the stacked covariance (block diagonal with one block
*           per independent sampling unit)
*  
*
* Returns:
*  0: success
* -1: failure
*/
start genDataFullCovarianceNoMissing(replicates, setSize, datasetPrefix, 
	X, XFullColNames, XModelColNames, Beta, SigmaS, dsList);

	* determine the number of sets;
	numSets = replicates / setSize;

	* create a vector of means (all 0's) for the random errors;
	p = ncol(SigmaS);
	mu = J(p,1,0);

	* Since MATTRIB attributes do not get passed into modules, ;
	* we have to associate the column names with X here. ;
	* IML object oriented programming FAIL;
	mattrib X colname=XFullColNames; 
	* obtain the subset of X involved in the mean portion of the model;
	Xmodel = X[,XModelColNames];

	/*
	*
	* We create a total of #replicates data sets in the
	* long format appropriate for PROC MIXED.
	*
	* The replicates are split across multiple files of size 'setSize'
	* with the start and end replicate number in the filename.
	*
	* Each data contains the following fields
	*  setID - the data set identifier
	*  Y - the simulated Y values
	*  E - the simulated errors
	*  X - all columns from the user specified X matrix with
	*    column names as specified in XFullColNames
	*/
	do setNum = 1 to numSets;
	  do repNum = 1 to setSize;
	    * generate correlated multivariate Gaussian data;
		E = randnormal(1, mu, SigmaS);
		* transpose into long format;
		Et = E`;
		* calculate Y;
		Y = Xmodel * Beta + Et;

		* build the data set;
		block = (J(p,1,repNum + ((setNum-1)*setSize)) || Y || Et);
		mattrib block colname=({"setID" "Y" "E"}); 

		* append the full X matrix to the data set;
		output = output // (block || X);
	  end;
	  * write to disk;
	  startIterNum = (setNum-1)*setSize+1;
	  startIter = char(startIterNum);
	  endIterNum = startIterNum + setSize - 1;
	  endIter = char(endIterNum); 
	  dataSetName = datasetPrefix + "Iter" + strip(startIter) + 
			"to" + strip(endIter);

	  dsList = dsList // dataSetname;

	  /*
	  * Write a temporary data set since I
	  * can't convince IML to use a dynamic name here
	  */
	  names = ({"setID" "Y" "E"}) || XFullColNames;
	  create temp from output[colname=names];
	  append from output;
	  close temp;
	  free output;

	  /*
	  * Change the name of the data set using SAS
	  */
	  submit dataSetName;
		data &dataSetName;
			set temp;
		run;
	  endsubmit;
	  
	  * remove the temp data set;
	  call delete("work", "temp"); 
	end;

finish;

/*
* calculateEmpiricalPowerCond
*
* Calculate empirical power for a mixed model.
*
* Arguments:
*  replicates - the number of replicates to produce for simulation
*  blockSize - number of replicates to include in each data set written to disk
*  X - the design matrix for fixed effects
*  Beta - matrix containing choices for regression coefficients for fixed effects
*  SigmaS - the stacked covariance (block diagonal with one block
*           per independent sampling unit)
*  
*
* Returns:
*  if success, empirical power
*  if failure, -1
*
*/
start calculateEmpiricalPowerConditional(replicates, blockSize, 
  simlibname, simprefix, mixedModMacroName,
  X, XFullColNames, XModelColNames, Beta, SigmaS,
  empiricalPower);

  /*
  * TODO - validate inputs!!!!
  */

  * generate data sets;
  prefix = simlibname + "." + simprefix;
  call genDataFullCovarianceNoMissing(replicates, blockSize, prefix, 
	X, XFullColNames, XModelColNames, Beta, SigmaS, dsList);

  * build the name of the contrast data set;
  contrastDataSet = "contrasts" + "_" + simprefix; 
  empiricalPowerDataSet = "empiricalPower" + "_" + simprefix; 

  * cleanup the SAS environment before we start;
  submit contrastDataSet;
	proc datasets;
		delete &contrastDataSet;
	run;
  endsubmit;

  do i = 1 to nrow(dsList);
    * get the data set name;
	sdCurrent = dsList[i];
    print sdCurrent;
	* call proc mixed;
    submit sdCurrent mixedModMacroName contrastDataSet;
		ods exclude all;
		ods noresults;
		* fit the model and output p-value for test;
		ods output Contrasts=tmpSimContrasts;
		%&mixedModMacroName(&sdCurrent);
		* append the results to the running data set;
		proc append base = &contrastDataSet data = tmpSimContrasts force; run;
		ods results;
		ods exclude none;
	endsubmit;
  end;

  * put the SAS environment back the way we found it;
  submit contrastDataSet empiricalPowerDataSet;
	data &contrastDataSet;
	  set &contrastDataSet;
	  reject = (probf < 0.05);
    run;
	proc freq data=&contrastDataSet;
		tables reject / out=&empiricalPowerDataSet;
	run;
	* stupid BS since the dynamic name only works on 64bit SAS;
	data temp;
		set &empiricalPowerDataSet;
		where reject = 1;
		keep percent;
	run;
  endsubmit;

  use temp;
  read all into empiricalPower;
  close temp;

  * remove the temp data set;
  call delete("work", "temp"); 

  * convert to a decimal from a percent;
  empiricalPower = empiricalPower / 100;

  /* the code that should run in SAS, but only does on 64bit
  * Load the empirical power into a matrix and return;
  use (empiricalPowerDataSet);
  read all into powerResults;
  close (empiricalPowerDataSet);
  */
finish;



